syntax = "proto3";

package common.proto;

// Task Events operation code
enum DCOperation {
    TASK_CREATE = 0;
    TASK_CANCEL = 1;
    TASK_UPDATE = 2;
    HEARTBEAT = 3;
}

// Hub task status
enum TaskStatus {
    STARTING = 0;
    START_SUCCESS = 1;
    START_FAILED = 2;
    RUNNING = 3;
    UPDATING = 4;
    UPDATE_SUCCESS = 5;
    UPDATE_FAILED = 6;
    CANCELLING = 7;
    CANCELLED = 8;
    CANCEL_FAILED = 9;
    DONE = 10;
}

enum TaskType {
    DEPLOYMENT = 0;
    JOB = 1;
    CRONJOB = 2;
}

// Data center status
enum DCStatus {
    AVAILABLE = 0;
    UNAVAILABLE = 1;
}

// Emtpy Message
message Empty {}

// Task Data structure
message Task  {
    string id = 1;
    string name = 2;// name of the task/image to run
    TaskType type = 3; //  0 deployment 1 job 2 cronjob
    oneof type_data {
        TaskTypeDeployment type_deployment = 4;
        TaskTypeJob type_job = 5;
        TaskTypeCronJob type_cron_job = 6;
    }
    string data_center_name = 7;
    TaskStatus status = 8;
    TaskAttributes attributes = 9;
    Environment environment = 10;
    string uid = 11;
    string chart_name = 12;
    string chart_ver = 13;
}

message TaskTypeDeployment {
    string image = 1; // template
}

message TaskTypeJob {
    string image = 1; // template
}

message TaskTypeCronJob {
    string image = 1; // template
    string schedule = 2;
}

message TaskAttributes {
    int32 replica = 1; // how many replica of environment
    bool hidden = 2;
    uint64 creation_date = 3; //task creation date
    uint64 last_modified_date = 4; //task creation date
}

message Environment {
    int32 cpu = 1;
    int32 memory = 2;
    int32 disk = 3;
}

message GeoLocation {
    string lat = 1; // latitude
    string lng = 2; // longitude
    string country = 3; // US 
}

// Data Center structure
message DataCenter {
    string id = 1;  //data center id
    string name = 2; // data center name
    GeoLocation geo_location = 3;
    DCStatus status = 4; // data center status // 1. online 2. offline
    DataCenterAttributes dc_attributes = 5;
    DCHeartbeatReport dc_heartbeat_report = 6;
}

message DataCenterAttributes {
    string wallet_address = 1;  //datacenter wallet address
    uint64 creation_date = 2; //task creation date
    uint64 last_modified_date = 3; //task creation date
}

message DCHeartbeatReport {
    string metrics = 1; //json string for Metrics structure which defined in constants
    string report = 2;
    uint64 report_time = 3;
}

message TaskReport {
    Task task = 1; //json string for Metrics structure which defined in constants
    string report = 2;
}

// data center communicate with dc manager
message DCStream {
    DCOperation op_type = 1; // HeartBeat or task operation

    oneof op_payload {
        Task task = 2; // Deploy task action
        TaskReport task_report = 3;
        DataCenter data_center = 4; // HearBeat Info with DataCenter message
    }
}
