// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: taskmgr/v1/micro/taskmgr.proto

/*
Package taskmgr is a generated protocol buffer package.

It is generated from these files:
	taskmgr/v1/micro/taskmgr.proto

It has these top-level messages:
	CreateTaskRequest
	CreateTaskResponse
	TaskListRequest
	TaskListResponse
	TaskFilter
	TaskID
	UpdateTaskRequest
	TaskOverviewResponse
	TaskLeaderBoardResponse
	TaskLeaderBoardDetail
*/
package taskmgr

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common_proto "github.com/Ankr-network/dccn-common/protos/common"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = common_proto.Empty{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TaskMgr service

type TaskMgrService interface {
	// Sends request to start a task and list task
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...client.CallOption) (*CreateTaskResponse, error)
	TaskList(ctx context.Context, in *TaskListRequest, opts ...client.CallOption) (*TaskListResponse, error)
	CancelTask(ctx context.Context, in *TaskID, opts ...client.CallOption) (*common_proto.Empty, error)
	PurgeTask(ctx context.Context, in *TaskID, opts ...client.CallOption) (*common_proto.Empty, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...client.CallOption) (*common_proto.Empty, error)
	TaskOverview(ctx context.Context, in *common_proto.Empty, opts ...client.CallOption) (*TaskOverviewResponse, error)
	TaskLeaderBoard(ctx context.Context, in *common_proto.Empty, opts ...client.CallOption) (*TaskLeaderBoardResponse, error)
}

type taskMgrService struct {
	c    client.Client
	name string
}

func NewTaskMgrService(name string, c client.Client) TaskMgrService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "taskmgr"
	}
	return &taskMgrService{
		c:    c,
		name: name,
	}
}

func (c *taskMgrService) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...client.CallOption) (*CreateTaskResponse, error) {
	req := c.c.NewRequest(c.name, "TaskMgr.CreateTask", in)
	out := new(CreateTaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrService) TaskList(ctx context.Context, in *TaskListRequest, opts ...client.CallOption) (*TaskListResponse, error) {
	req := c.c.NewRequest(c.name, "TaskMgr.TaskList", in)
	out := new(TaskListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrService) CancelTask(ctx context.Context, in *TaskID, opts ...client.CallOption) (*common_proto.Empty, error) {
	req := c.c.NewRequest(c.name, "TaskMgr.CancelTask", in)
	out := new(common_proto.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrService) PurgeTask(ctx context.Context, in *TaskID, opts ...client.CallOption) (*common_proto.Empty, error) {
	req := c.c.NewRequest(c.name, "TaskMgr.PurgeTask", in)
	out := new(common_proto.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrService) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...client.CallOption) (*common_proto.Empty, error) {
	req := c.c.NewRequest(c.name, "TaskMgr.UpdateTask", in)
	out := new(common_proto.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrService) TaskOverview(ctx context.Context, in *common_proto.Empty, opts ...client.CallOption) (*TaskOverviewResponse, error) {
	req := c.c.NewRequest(c.name, "TaskMgr.TaskOverview", in)
	out := new(TaskOverviewResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskMgrService) TaskLeaderBoard(ctx context.Context, in *common_proto.Empty, opts ...client.CallOption) (*TaskLeaderBoardResponse, error) {
	req := c.c.NewRequest(c.name, "TaskMgr.TaskLeaderBoard", in)
	out := new(TaskLeaderBoardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskMgr service

type TaskMgrHandler interface {
	// Sends request to start a task and list task
	CreateTask(context.Context, *CreateTaskRequest, *CreateTaskResponse) error
	TaskList(context.Context, *TaskListRequest, *TaskListResponse) error
	CancelTask(context.Context, *TaskID, *common_proto.Empty) error
	PurgeTask(context.Context, *TaskID, *common_proto.Empty) error
	UpdateTask(context.Context, *UpdateTaskRequest, *common_proto.Empty) error
	TaskOverview(context.Context, *common_proto.Empty, *TaskOverviewResponse) error
	TaskLeaderBoard(context.Context, *common_proto.Empty, *TaskLeaderBoardResponse) error
}

func RegisterTaskMgrHandler(s server.Server, hdlr TaskMgrHandler, opts ...server.HandlerOption) error {
	type taskMgr interface {
		CreateTask(ctx context.Context, in *CreateTaskRequest, out *CreateTaskResponse) error
		TaskList(ctx context.Context, in *TaskListRequest, out *TaskListResponse) error
		CancelTask(ctx context.Context, in *TaskID, out *common_proto.Empty) error
		PurgeTask(ctx context.Context, in *TaskID, out *common_proto.Empty) error
		UpdateTask(ctx context.Context, in *UpdateTaskRequest, out *common_proto.Empty) error
		TaskOverview(ctx context.Context, in *common_proto.Empty, out *TaskOverviewResponse) error
		TaskLeaderBoard(ctx context.Context, in *common_proto.Empty, out *TaskLeaderBoardResponse) error
	}
	type TaskMgr struct {
		taskMgr
	}
	h := &taskMgrHandler{hdlr}
	return s.Handle(s.NewHandler(&TaskMgr{h}, opts...))
}

type taskMgrHandler struct {
	TaskMgrHandler
}

func (h *taskMgrHandler) CreateTask(ctx context.Context, in *CreateTaskRequest, out *CreateTaskResponse) error {
	return h.TaskMgrHandler.CreateTask(ctx, in, out)
}

func (h *taskMgrHandler) TaskList(ctx context.Context, in *TaskListRequest, out *TaskListResponse) error {
	return h.TaskMgrHandler.TaskList(ctx, in, out)
}

func (h *taskMgrHandler) CancelTask(ctx context.Context, in *TaskID, out *common_proto.Empty) error {
	return h.TaskMgrHandler.CancelTask(ctx, in, out)
}

func (h *taskMgrHandler) PurgeTask(ctx context.Context, in *TaskID, out *common_proto.Empty) error {
	return h.TaskMgrHandler.PurgeTask(ctx, in, out)
}

func (h *taskMgrHandler) UpdateTask(ctx context.Context, in *UpdateTaskRequest, out *common_proto.Empty) error {
	return h.TaskMgrHandler.UpdateTask(ctx, in, out)
}

func (h *taskMgrHandler) TaskOverview(ctx context.Context, in *common_proto.Empty, out *TaskOverviewResponse) error {
	return h.TaskMgrHandler.TaskOverview(ctx, in, out)
}

func (h *taskMgrHandler) TaskLeaderBoard(ctx context.Context, in *common_proto.Empty, out *TaskLeaderBoardResponse) error {
	return h.TaskMgrHandler.TaskLeaderBoard(ctx, in, out)
}
